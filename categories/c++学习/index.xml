<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>C&#43;&#43;学习 - 分类 - Dling</title>
        <link>http://example.org/categories/c&#43;&#43;%E5%AD%A6%E4%B9%A0/</link>
        <description>C&#43;&#43;学习 - 分类 - Dling</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>897862595@qq.com (煜江叔叔)</managingEditor>
            <webMaster>897862595@qq.com (煜江叔叔)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 14 Mar 2023 10:34:58 &#43;0800</lastBuildDate><atom:link href="http://example.org/categories/c&#43;&#43;%E5%AD%A6%E4%B9%A0/" rel="self" type="application/rss+xml" /><item>
    <title>C&#43;&#43;学习之关联容器</title>
    <link>http://example.org/2023/c-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/</link>
    <pubDate>Tue, 14 Mar 2023 10:34:58 &#43;0800</pubDate><author>
        <name>煜江叔叔</name>
    </author><guid>http://example.org/2023/c-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/</guid>
    <description><![CDATA[mapmap是关键字－值对的集合。 map&lt;string, int&gt; word分别指定关键字的类型和值的类型。 word.first和word.second分别用于取关键字和]]></description>
</item><item>
    <title>C&#43;&#43;学习之泛型</title>
    <link>http://example.org/2023/c-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%B3%9B%E5%9E%8B/</link>
    <pubDate>Mon, 13 Mar 2023 17:12:38 &#43;0800</pubDate><author>
        <name>煜江叔叔</name>
    </author><guid>http://example.org/2023/c-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%B3%9B%E5%9E%8B/</guid>
    <description><![CDATA[泛型算法可用于不同类型的容器和不同类型的元素,大多数算法定义域algorothm库中。 只读算法find()1 2 3 4 5 #include &lt;algorithm&gt; vector&lt;int&gt; vec{1,2,3,4,5}; int val = 4; auto result = find(vec.cbegin(),]]></description>
</item><item>
    <title>C&#43;&#43;类</title>
    <link>http://example.org/2023/c-%E7%B1%BB/</link>
    <pubDate>Wed, 04 Jan 2023 20:20:39 &#43;0800</pubDate><author>
        <name>煜江叔叔</name>
    </author><guid>http://example.org/2023/c-%E7%B1%BB/</guid>
    <description><![CDATA[类基础 public成员提供类的接口，private成员提供具体实现细节。 struct是成员默认为public的class。 默认拷贝一个类对象]]></description>
</item><item>
    <title>C&#43;&#43;名字空间</title>
    <link>http://example.org/2023/c-%E5%90%8D%E5%AD%97%E7%A9%BA%E9%97%B4/</link>
    <pubDate>Wed, 04 Jan 2023 18:10:45 &#43;0800</pubDate><author>
        <name>煜江叔叔</name>
    </author><guid>http://example.org/2023/c-%E5%90%8D%E5%AD%97%E7%A9%BA%E9%97%B4/</guid>
    <description><![CDATA[名字空间名字空间的概念用来直接表示本属一体的一组属性。名字空间的成员都位于相同的作用域中，无须特殊符号即可互相访问，而从名字空间外访问它们就]]></description>
</item><item>
    <title>C&#43;&#43;函数</title>
    <link>http://example.org/2022/c-%E5%87%BD%E6%95%B0/</link>
    <pubDate>Wed, 09 Nov 2022 15:53:25 &#43;0800</pubDate><author>
        <name>煜江叔叔</name>
    </author><guid>http://example.org/2022/c-%E5%87%BD%E6%95%B0/</guid>
    <description><![CDATA[函数声明函数声明负责指定函数的名字、返回值的类型以及调用该函数所需的参数数量和类型： 1 2 3 Elem* next_elem(); //无须参数，返回Elem* void exit(int); //int类型]]></description>
</item><item>
    <title>C&#43;&#43;选择适当操作</title>
    <link>http://example.org/2022/c-%E9%80%89%E6%8B%A9%E9%80%82%E5%BD%93%E6%93%8D%E4%BD%9C/</link>
    <pubDate>Mon, 07 Nov 2022 15:55:29 &#43;0800</pubDate><author>
        <name>煜江叔叔</name>
    </author><guid>http://example.org/2022/c-%E9%80%89%E6%8B%A9%E9%80%82%E5%BD%93%E6%93%8D%E4%BD%9C/</guid>
    <description><![CDATA[其他运算符逻辑运算符逻辑运算符&amp;&amp;、||和！接受算数类型以及指针类型的运算对象。将其转换成bool类型。最后返回一个bool]]></description>
</item><item>
    <title>C&#43;&#43;表达式</title>
    <link>http://example.org/2022/c-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
    <pubDate>Mon, 31 Oct 2022 19:31:31 &#43;0800</pubDate><author>
        <name>煜江叔叔</name>
    </author><guid>http://example.org/2022/c-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
    <description><![CDATA[桌面计算器实例计算器包含四个部分：分析器、输入函数、符号表和驱动。实际上，它的功能类似一个微型编译器：其中分析器负责分析语法，输入函数负责处]]></description>
</item><item>
    <title>C&#43;&#43;结构联合与枚举</title>
    <link>http://example.org/2022/c-%E7%BB%93%E6%9E%84%E8%81%94%E5%90%88%E4%B8%8E%E6%9E%9A%E4%B8%BE/</link>
    <pubDate>Thu, 27 Oct 2022 19:58:33 &#43;0800</pubDate><author>
        <name>煜江叔叔</name>
    </author><guid>http://example.org/2022/c-%E7%BB%93%E6%9E%84%E8%81%94%E5%90%88%E4%B8%8E%E6%9E%9A%E4%B8%BE/</guid>
    <description><![CDATA[结构数组是相同类型的集合，相反，struct是任意类型元素的集合： 1 2 3 4 5 6 7 8 struct Address{ const char* name; int number; const char* street; const char* town; char state[2]; const char* zip; }; 声明Address类]]></description>
</item><item>
    <title>C&#43;&#43;语句</title>
    <link>http://example.org/2022/c-%E8%AF%AD%E5%8F%A5/</link>
    <pubDate>Thu, 27 Oct 2022 19:32:24 &#43;0800</pubDate><author>
        <name>煜江叔叔</name>
    </author><guid>http://example.org/2022/c-%E8%AF%AD%E5%8F%A5/</guid>
    <description><![CDATA[选择语句switch语句case分支中的声明C++允许在switch语句的块内声明变量，但是不能不初始化： 1 2 3 4 5 6 7 8 void f(int i){ switch(i){ case 0: int x; /]]></description>
</item><item>
    <title>C&#43;&#43;指针与引用</title>
    <link>http://example.org/2022/c-%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/</link>
    <pubDate>Mon, 24 Oct 2022 19:23:55 &#43;0800</pubDate><author>
        <name>煜江叔叔</name>
    </author><guid>http://example.org/2022/c-%E6%8C%87%E9%92%88%E4%B8%8E%E5%BC%95%E7%94%A8/</guid>
    <description><![CDATA[指针对于类型T来说，T是表示“指向T的指针”的；类型。换句话说，T类型的变量能存放T类型对象的地址： 1 2 char c = &#39;a&#39;; char* p = &amp;c; //p存放c的地址 对]]></description>
</item></channel>
</rss>
